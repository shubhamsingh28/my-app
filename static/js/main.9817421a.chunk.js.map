{"version":3,"sources":["serviceWorker.js","search-component.js","index.js"],"names":["Boolean","window","location","hostname","match","Search","_this","this","react_default","a","createElement","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","value","props","searchValue","onChange","e","searchValueOnChange","React","Component","Covid","_React$Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSearchValueOnChange","bind","assertThisInitialized","state","covidData","displayedData","deathCount","recoverCount","inherits","createClass","key","tableData","forEach","data","casesToday","concat","cases","todayCases","deathsToday","deaths","todayDeaths","push","Alert","variant","Heading","country","recovered","isEmpty","Spinner","as","animation","size","role","aria-hidden","Table","hover","responsive","Badge","getTableBody","Accordion","Card","Toggle","Header","eventKey","Collapse","Body","filter","toLowerCase","indexOf","target","setState","getDisplayedData","getHeader","search_component_Search","getTable","getSpinner","_this2","document","title","fetch","then","results","json","totalCountObj","active","critical","obj","unshift","ReactDOM","render","src_Covid","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9817421a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nexport default class Search extends React.Component {\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <InputGroup className=\"mb-3\">\r\n    <FormControl\r\n      placeholder=\"Search for a country..\"\r\n      aria-label=\"Recipient's username\"\r\n      aria-describedby=\"basic-addon2\"\r\n      value={this.props.searchValue}\r\n      onChange={e => this.props.searchValueOnChange(e)}\r\n    />\r\n  </InputGroup>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  get  from 'lodash/get';\r\nimport  filter  from 'lodash/filter';\r\nimport forEach from 'lodash/forEach';\r\nimport  isEmpty  from 'lodash/isEmpty';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { KeyObject } from 'crypto';\r\nimport Search from './search-component';\r\n\r\nexport class Covid extends React.Component {\r\n  constructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.handleSearchValueOnChange = this.handleSearchValueOnChange.bind(this);\r\n    this.state = {\r\n\t\t\tcovidData: {},\r\n\t\t\tdisplayedData: {},\r\n\t\t\tsearchValue: \"\",\r\n\t\t\tdeathCount: \"\",\r\n\t\t\trecoverCount: \"\",\r\n    };\r\n\t}\r\n\r\n\tgetTableBody() {\r\n\t\tlet tableData = [];\r\n\t\tforEach(this.state.displayedData, (data, key) => {\r\n\t\t\tconst casesToday = `${data.cases} | ${data.todayCases}`;\r\n\t\t\tconst deathsToday = `${data.deaths} | ${data.todayDeaths}`;\r\n\t\t\ttableData.push(\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<Alert variant=\"primary\">\r\n\t\t\t\t\t\t\t\t<Alert.Heading>\r\n\t\t\t\t\t\t\t\t\t\t{data.country}\r\n\t\t\t\t\t\t\t\t</Alert.Heading>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<Alert variant=\"primary\">\r\n\t\t\t\t\t\t\t\t<Alert.Heading>\r\n\t\t\t\t\t\t\t\t\t\t{casesToday}\r\n\t\t\t\t\t\t\t\t</Alert.Heading>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<Alert variant=\"success\">\r\n\t\t\t\t\t\t\t\t<Alert.Heading>\r\n\t\t\t\t\t\t\t\t\t\t{data.recovered}\r\n\t\t\t\t\t\t\t\t</Alert.Heading>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<Alert variant=\"danger\">\r\n\t\t\t\t\t\t\t\t<Alert.Heading>\r\n\t\t\t\t\t\t\t\t\t\t{deathsToday}\r\n\t\t\t\t\t\t\t\t</Alert.Heading>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t);\r\n\t});\r\n\t\treturn tableData;\r\n\t}\r\n\r\n\tgetSpinner() {\r\n\t\tif (isEmpty(this.state.covidData)) {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t\t<Spinner\r\n\t\t\t\t\t\tas=\"span\"\r\n\t\t\t\t\t\tanimation=\"grow\"\r\n\t\t\t\t\t\tsize=\"md\"\r\n\t\t\t\t\t\trole=\"status\"\r\n\t\t\t\t\t\taria-hidden=\"true\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t\tLoading...\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tgetTable() {\r\n\t\treturn (\r\n\t\t\t<Table\r\n\t\t\thover\r\n\t\t\tvariant=\"dark\"\r\n\t\t\tresponsive\r\n\t\t\tsize=\"sm\">\r\n\t\t\t <thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<th>\r\n\t\t\t\t\t<Badge variant=\"light\"\r\n\t\t\t\t\t\tclassName=\"covid__table-header\"\r\n\t\t\t\t\t>Country</Badge>\r\n\t\t\t\t\t</th>\r\n\t\t\t\t\t<th><Badge variant=\"light\"\r\n\t\t\t\t\t\tclassName=\"covid__table-header\"\r\n\t\t\t\t\t>Cases (Total | Today)</Badge></th>\r\n\t\t\t\t\t<th><Badge variant=\"light\"\r\n\t\t\t\t\t\tclassName=\"covid__table-header\"\r\n\t\t\t\t\t>Recovered</Badge></th>\r\n\t\t\t\t\t<th><Badge variant=\"light\"\r\n\t\t\t\t\t\tclassName=\"covid__table-header\"\r\n\t\t\t\t\t>Deaths (Total | Today)</Badge></th>\r\n\t\t\t\t</tr>\r\n\t\t\t </thead>\r\n\t\t\t <tbody>\r\n\t\t\t\t {this.getTableBody()}\r\n\t\t\t </tbody>\r\n\t\t\t</Table>\r\n\t\t);\r\n\t}\r\n\r\n\tgetHeader() {\r\n\t\treturn(\r\n\t\t\t<div className=\"covid__full-data-body\">\r\n\t\t\t\t<Accordion>\r\n  <Card>\r\n    <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n      Global Coronavirus Information\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey=\"0\">\r\n\t\t\t<Card.Body>\r\n\t\t\t\tThe data is updated every 24 hours and has been taken from official WHO statistics\r\n\t\t\t\t<hr />\r\n\t\t\t\tStay Home. Stay Safe\r\n\t\t\t</Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n</Accordion>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tgetDisplayedData(searchValue) {\r\n\t\tconst displayedData = filter(this.state.covidData, (data, key) => {\r\n\t\t\tconst country = data.country.toLowerCase();\r\n\t\t\treturn country.indexOf(searchValue.toLowerCase()) === 0;\r\n\t\t});\r\n\t\treturn displayedData;\r\n\t}\r\n\r\n\thandleSearchValueOnChange(e) {\r\n\t\tconst searchValue = e.target.value;\r\n\t\tthis.setState({\r\n\t\t\tsearchValue: searchValue,\r\n\t\t\tdisplayedData: this.getDisplayedData(searchValue)\r\n\t\t});\r\n\t}\r\n\r\n  render(){\r\n\r\n\t\t/*let options = [];\r\n\t\tif (!isEmpty(covid)) {\r\n\t\t\tforEach(covid, (data, value) => {\r\n\t\t\t\t\tconsole.log(data, value);\r\n\t\t\t\t\tconsole.log(\"jell\");\r\n\t\t\t});\r\n\t\t}*/\r\n\r\n\t  return (\r\n\t\t\t<div className=\"covid__body\">\r\n\t\t\t\t{this.getHeader()}\r\n\t\t\t\t<div className=\"covid__search-component\">\r\n\t\t\t\t\t<Search\r\n\t\t\t\t\t\tsearchValue={this.state.searchValue}\r\n\t\t\t\t\t\tsearchValueOnChange={this.handleSearchValueOnChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"covid__table\">\r\n\t\t\t\t\t\t{this.getTable()}\r\n\t\t\t\t\t\t{this.getSpinner()}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n    );\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tdocument.title = \"Covid Update\";\r\n\t\t/*fetch('https://pomber.github.io/covid19/timeseries.json')\r\n\t\t.then(results => {\r\n\t\t\t\treturn results.json();\r\n\t\t}).then(data => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcovidData: data\r\n\t\t\t});\r\n\t\t});*/\r\n\r\n\t\tfetch('https://coronavirus-19-api.herokuapp.com/countries')\r\n\t\t.then(results => {\r\n\t\t\t\treturn results.json();\r\n\t\t}).then(data => {\r\n\t\t\tlet totalCountObj = {\r\n\t\t\t\tcountry: 'All country',\r\n\t\t\t\tcases: 0,\r\n\t\t\t\ttodayCases: 0,\r\n\t\t\t\tdeaths: 0,\r\n\t\t\t\ttodayDeaths: 0,\r\n\t\t\t\trecovered: 0,\r\n\t\t\t\tactive: 0,\r\n\t\t\t\tcritical: 0\r\n\t\t\t};\r\n\t\t\tlet processData = function(){\r\n\r\n\t\t\t\tdata.forEach(function(obj){\r\n\t\t\t\t\ttotalCountObj.cases += obj.cases;\r\n\t\t\t\t\ttotalCountObj.todayCases += obj.todayCases;\r\n\t\t\t\t\ttotalCountObj.deaths += obj.deaths;\r\n\t\t\t\t\ttotalCountObj.todayDeaths += obj.todayDeaths;\r\n\t\t\t\t\ttotalCountObj.recovered += obj.recovered;\r\n\t\t\t\t\ttotalCountObj.active += obj.active;\r\n\t\t\t\t\ttotalCountObj.critical += obj.critical;\r\n\t\t\t\t});\r\n\t\t\t\tdata.unshift(totalCountObj);\r\n\t\t\t}\r\n\t\t\tprocessData();\r\n\t\t\tthis.setState({\r\n\t\t\t\tcovidData: data,\r\n\t\t\t\tdisplayedData: data\r\n\t\t\t});\r\n\t\t});\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <Covid />,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}